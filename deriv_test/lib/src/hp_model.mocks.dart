// Mocks generated by Mockito 5.3.2 from annotations
// in deriv_test/src/hp_model.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:ui' as _i4;

import 'package:bloc/bloc.dart' as _i8;
import 'package:deriv_bloc/deriv_bloc.dart' as _i5;
import 'package:deriv_data/deriv_data.dart' as _i3;
import 'package:deriv_model/models/model.dart' as _i7;
import 'package:deriv_test/src/hp_model.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocketPort_1 extends _i1.SmartFake implements _i3.SocketPort {
  _FakeSocketPort_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_2 extends _i1.SmartFake implements _i4.Color {
  _FakeColor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_3 extends _i1.SmartFake implements _i5.HomeState {
  _FakeHomeState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomePageCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePageCubit extends _i1.Mock implements _i6.HomePageCubit {
  @override
  List<_i7.ActiveSymbols> get datas => (super.noSuchMethod(
        Invocation.getter(#datas),
        returnValue: <_i7.ActiveSymbols>[],
        returnValueForMissingStub: <_i7.ActiveSymbols>[],
      ) as List<_i7.ActiveSymbols>);
  @override
  set datas(List<_i7.ActiveSymbols>? _datas) => super.noSuchMethod(
        Invocation.setter(
          #datas,
          _datas,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.StreamController<String> get selectedMarket => (super.noSuchMethod(
        Invocation.getter(#selectedMarket),
        returnValue: _FakeStreamController_0<String>(
          this,
          Invocation.getter(#selectedMarket),
        ),
        returnValueForMissingStub: _FakeStreamController_0<String>(
          this,
          Invocation.getter(#selectedMarket),
        ),
      ) as _i2.StreamController<String>);
  @override
  set selectedMarket(_i2.StreamController<String>? _selectedMarket) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedMarket,
          _selectedMarket,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.StreamController<String?> get selectedSymbol => (super.noSuchMethod(
        Invocation.getter(#selectedSymbol),
        returnValue: _FakeStreamController_0<String?>(
          this,
          Invocation.getter(#selectedSymbol),
        ),
        returnValueForMissingStub: _FakeStreamController_0<String?>(
          this,
          Invocation.getter(#selectedSymbol),
        ),
      ) as _i2.StreamController<String?>);
  @override
  set selectedSymbol(_i2.StreamController<String?>? _selectedSymbol) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedSymbol,
          _selectedSymbol,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.StreamController<_i5.PriceEvent> get priceEvent => (super.noSuchMethod(
        Invocation.getter(#priceEvent),
        returnValue: _FakeStreamController_0<_i5.PriceEvent>(
          this,
          Invocation.getter(#priceEvent),
        ),
        returnValueForMissingStub: _FakeStreamController_0<_i5.PriceEvent>(
          this,
          Invocation.getter(#priceEvent),
        ),
      ) as _i2.StreamController<_i5.PriceEvent>);
  @override
  set priceEvent(_i2.StreamController<_i5.PriceEvent>? _priceEvent) =>
      super.noSuchMethod(
        Invocation.setter(
          #priceEvent,
          _priceEvent,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.SocketPort get adapter => (super.noSuchMethod(
        Invocation.getter(#adapter),
        returnValue: _FakeSocketPort_1(
          this,
          Invocation.getter(#adapter),
        ),
        returnValueForMissingStub: _FakeSocketPort_1(
          this,
          Invocation.getter(#adapter),
        ),
      ) as _i3.SocketPort);
  @override
  set adapter(_i3.SocketPort? _adapter) => super.noSuchMethod(
        Invocation.setter(
          #adapter,
          _adapter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set price(double? _price) => super.noSuchMethod(
        Invocation.setter(
          #price,
          _price,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Color get textColor => (super.noSuchMethod(
        Invocation.getter(#textColor),
        returnValue: _FakeColor_2(
          this,
          Invocation.getter(#textColor),
        ),
        returnValueForMissingStub: _FakeColor_2(
          this,
          Invocation.getter(#textColor),
        ),
      ) as _i4.Color);
  @override
  set textColor(_i4.Color? _textColor) => super.noSuchMethod(
        Invocation.setter(
          #textColor,
          _textColor,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get tickTriger => (super.noSuchMethod(
        Invocation.getter(#tickTriger),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get forgetId => (super.noSuchMethod(
        Invocation.getter(#forgetId),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  List<String> get markets => (super.noSuchMethod(
        Invocation.getter(#markets),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  List<String> get symbols => (super.noSuchMethod(
        Invocation.getter(#symbols),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  _i2.Stream<String> get marketStream => (super.noSuchMethod(
        Invocation.getter(#marketStream),
        returnValue: _i2.Stream<String>.empty(),
        returnValueForMissingStub: _i2.Stream<String>.empty(),
      ) as _i2.Stream<String>);
  @override
  _i2.Stream<_i5.PriceEvent> get priceEvents => (super.noSuchMethod(
        Invocation.getter(#priceEvents),
        returnValue: _i2.Stream<_i5.PriceEvent>.empty(),
        returnValueForMissingStub: _i2.Stream<_i5.PriceEvent>.empty(),
      ) as _i2.Stream<_i5.PriceEvent>);
  @override
  _i2.Stream<String?> get symbolStream => (super.noSuchMethod(
        Invocation.getter(#symbolStream),
        returnValue: _i2.Stream<String?>.empty(),
        returnValueForMissingStub: _i2.Stream<String?>.empty(),
      ) as _i2.Stream<String?>);
  @override
  _i5.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeHomeState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.HomeState);
  @override
  _i2.Stream<_i5.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i2.Stream<_i5.HomeState>.empty(),
        returnValueForMissingStub: _i2.Stream<_i5.HomeState>.empty(),
      ) as _i2.Stream<_i5.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Future<dynamic> mapToEvent(_i5.HomeState? state) => (super.noSuchMethod(
        Invocation.method(
          #mapToEvent,
          [state],
        ),
        returnValue: _i2.Future<dynamic>.value(),
        returnValueForMissingStub: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  void reqData() => super.noSuchMethod(
        Invocation.method(
          #reqData,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic onSelectMarket(String? market) => super.noSuchMethod(
        Invocation.method(
          #onSelectMarket,
          [market],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetPrice() => super.noSuchMethod(
        Invocation.method(
          #resetPrice,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic onNewTicket(_i7.Tick? tick) => super.noSuchMethod(
        Invocation.method(
          #onNewTicket,
          [tick],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i8.Change<_i5.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}
