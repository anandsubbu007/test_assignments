// Mocks generated by Mockito 5.3.2 from annotations
// in deriv_data/src/socket_adapter.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:deriv_data/deriv_data.dart' as _i4;
import 'package:deriv_model/models/model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketChannel_0 extends _i1.SmartFake
    implements _i2.WebSocketChannel {
  _FakeWebSocketChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_1<T> extends _i1.SmartFake
    implements _i3.StreamController<T> {
  _FakeStreamController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SocketAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketAdapter extends _i1.Mock implements _i4.SocketAdapter {
  @override
  _i2.WebSocketChannel get channel => (super.noSuchMethod(
        Invocation.getter(#channel),
        returnValue: _FakeWebSocketChannel_0(
          this,
          Invocation.getter(#channel),
        ),
        returnValueForMissingStub: _FakeWebSocketChannel_0(
          this,
          Invocation.getter(#channel),
        ),
      ) as _i2.WebSocketChannel);
  @override
  bool get _isListening => (super.noSuchMethod(
        Invocation.getter(#isListening),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set _isListening(bool? _isListening) => super.noSuchMethod(
        Invocation.setter(
          #isListening,
          _isListening,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.StreamController<dynamic> get errorController => (super.noSuchMethod(
        Invocation.getter(#errorController),
        returnValue: _FakeStreamController_1<dynamic>(
          this,
          Invocation.getter(#errorController),
        ),
        returnValueForMissingStub: _FakeStreamController_1<dynamic>(
          this,
          Invocation.getter(#errorController),
        ),
      ) as _i3.StreamController<dynamic>);
  @override
  set errorController(_i3.StreamController<dynamic>? _errorController) =>
      super.noSuchMethod(
        Invocation.setter(
          #errorController,
          _errorController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.StreamController<List<_i5.ActiveSymbols>> get marketsData =>
      (super.noSuchMethod(
        Invocation.getter(#marketsData),
        returnValue: _FakeStreamController_1<List<_i5.ActiveSymbols>>(
          this,
          Invocation.getter(#marketsData),
        ),
        returnValueForMissingStub:
            _FakeStreamController_1<List<_i5.ActiveSymbols>>(
          this,
          Invocation.getter(#marketsData),
        ),
      ) as _i3.StreamController<List<_i5.ActiveSymbols>>);
  @override
  set marketsData(
          _i3.StreamController<List<_i5.ActiveSymbols>>? _marketsData) =>
      super.noSuchMethod(
        Invocation.setter(
          #marketsData,
          _marketsData,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.StreamController<_i5.Tick> get tickData => (super.noSuchMethod(
        Invocation.getter(#tickData),
        returnValue: _FakeStreamController_1<_i5.Tick>(
          this,
          Invocation.getter(#tickData),
        ),
        returnValueForMissingStub: _FakeStreamController_1<_i5.Tick>(
          this,
          Invocation.getter(#tickData),
        ),
      ) as _i3.StreamController<_i5.Tick>);
  @override
  set tickData(_i3.StreamController<_i5.Tick>? _tickData) => super.noSuchMethod(
        Invocation.setter(
          #tickData,
          _tickData,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Stream<List<_i5.ActiveSymbols>> get marketsDataStream =>
      (super.noSuchMethod(
        Invocation.getter(#marketsDataStream),
        returnValue: _i3.Stream<List<_i5.ActiveSymbols>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i5.ActiveSymbols>>.empty(),
      ) as _i3.Stream<List<_i5.ActiveSymbols>>);
  @override
  _i3.Stream<_i5.Tick> get tickDataStream => (super.noSuchMethod(
        Invocation.getter(#tickDataStream),
        returnValue: _i3.Stream<_i5.Tick>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Tick>.empty(),
      ) as _i3.Stream<_i5.Tick>);
  @override
  _i3.Stream<dynamic> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i3.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i3.Stream<dynamic>.empty(),
      ) as _i3.Stream<dynamic>);
  @override
  void sendMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
